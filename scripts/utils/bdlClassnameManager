#!/usr/bin/env node

/* eslint-disable */
const fs = require('fs');
const colors = require('colors/safe');
const { promisify } = require('util');
const camelCase = require('lodash/camelCase');
const kebabCase = require('lodash/kebabCase');
const identity = require('lodash/identity');
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

/*
    The BDL classname manager is a tool to help identify and correct the usage of classnames
    names across box-ui-elements, and other projects.

    HOW TO RUN:
    cd src/
    find . -name "*.scss" -exec ../scripts/utils/bdlClassnameManager swap {} \;
    // OLD find . -name "*.js" -exec ../scripts/utils/bdlClassnameManager swap {} \;
    find . -not -name "*test.js" -and -name "*.js" -exec ../scripts/utils/bdlClassnameManager swap {} \;
    find . -name "*test.js" -exec ../scripts/utils/bdlClassnameManager swap {} '' --tests \;
    // ^^ needs to be '. for test.js ; . doesnt work on its own

    find . -name "*test.js" -exec ../../../scripts/utils/bdlClassnameManager swap {} '' --tests \;
*/

/*
    TODO:
    * What to do with span?
    * test.js files, esp. 'label'
    * should run *.js WITHOUT test.js
    * should run *-test.js WITH '. prefix instead of ' prefix
    * Tooltip.js uniqueId
    * UploadStateContent.js btn-primary *** ` backticks!!
*/

const extendedConversionMap = {
    'btn-primary': 'bdl-Button--primary',
    'btn-plain': 'bdl-Button--plain',
    'btn-group': 'bdl-ButtonGroup', // only missed `btn-group
    'select-button': 'bdl-SelectButton',
    'is-disabled': 'bdl-is-disabled',
    'pill-error': 'bdl-Pill--error',
    // updating the following as well, otherwise baseConversionMap overrides these classes:
    'btn-done': 'bdl-Button--done',
    'btn-loading-indicator': 'bdl-Button-loadingIndicator',
    'label-optional': 'bdl-Label--optional',
    'pill-cloud-button': 'bdl-PillCloud-button',
    'pill-cloud-container': 'bdl-PillCloud-container',
    'pill-selector-error': 'bdl-PillSelector--error',
    'pill-selector-hidden-input': 'bdl-PillSelector-hiddenInput',
    'pill-selector-input': 'bdl-PillSelector-input',
    'pill-selector-input-wrapper': 'bdl-PillSelector-inputWrapper',
    'pill-selector-suggested': 'bdl-PillSelector-suggested',
    'pill-selector-suggestions-enabled': 'bdl-PillSelector--suggestionsEnabled',
    'pill-selector-wrapper': 'bdl-PillSelector-wrapper',
    'pill-warning': 'bdl-Pill--warning',
    'pills-list': 'bdl-Pills-list',
    'toggle-overlay-container': 'bdl-Toggle-overlayContainer',
    'toggle-simple-switch': 'bdl-Toggle-simpleSwitch',
    'toggle-simple': 'bdl-Toggle-simple',
    'toggle-simple-input': 'bdl-Toggle-simpleInput',
    'toggle-simple-description': 'bdl-Toggle-simpleDescription',
    'tooltip-icon-container': 'bdl-Tooltip-iconContainer',
    'tooltip-close-button': 'bdl-Tooltip-closeButton',
    // unsure if we want to update these, are they autogenerated?
    'tooltip-target-attached-top': 'bdl-Tooltip--targetAattachedTop',
    'tooltip-target-attached-center': 'bdl-Tooltip--targetAattachedCenter',
    'tooltip-target-attached-left': 'bdl-Tooltip--targetAattachedLeft',
    'tooltip-target-attached-right': 'bdl-Tooltip--targetAattachedRight',
};

const baseConversionMap = {
    'btn': 'bdl-Button',
    'label': 'bdl-Label',
    'pill': 'bdl-Pill',
    'toggle': 'bdl-Toggle',
    'tooltip': 'bdl-Tooltip',
};

function printHelp() {
    console.log(`Usage: ${process.argv[1].split('/').pop()} operation fileName [--verbose] [--tests]`);
    console.log('\nSupported operations:');
    console.log('\tcheck\t\tcheck to see if a file contains deprecated values (returns error if it does)');
    console.log('\tswap\t\treplace known-deprecated variable names in a JS or SCSS file');
}

async function processFile(conversionMap) {
    // argv 0 and 1 are the node instance and the script name respectively.
    // argv 2 is the operation: check, swap, ...
    const operation = process.argv[2];

    // argv 3 is the file (and extension)
    const fileName = process.argv[3];

    if (!fileName) {
        console.error(colors.red('Missing parameter:'), colors.white('fileName'));
        process.exit(1);
    }
    const fileType = fileName.split('.').pop();
    const verboseMode = process.argv[4] === '--verbose';
    const testMode = process.argv[5] === '--tests';

    let reBadName;
    if (fileType === 'scss' || (fileType === 'js' && testMode)) {
        // only make changes in .scss files for classnames prefixed with '.'
        const converter = entry => `\\.${entry}`;
        reBadName = new RegExp(Object.keys(conversionMap).map(converter).join('|'), 'g');
    } else if (fileType === 'js') {
        // only make changes in .js files for classnames prefixed with " or '
        const firstConverter = entry => `"${entry}`;
        const secondConverter = entry => `'${entry}`;
        reBadName = new RegExp(
            Object.keys(conversionMap).map(firstConverter).join('|')
                .concat('|')
                .concat(Object.keys(conversionMap).map(secondConverter).join('|')),
            'g',
        );

    }

    try {
        const fileToParse = await readFile(fileName, { encoding: 'utf8' });

        switch (operation) {
            case 'check':
                // determine if the file is using one of the legacy variable names
                const foundMatch = reBadName.test(fileToParse);
                if (foundMatch) {
                    // Exit with an error code: we should not find bad names
                    if (verboseMode) {
                        console.error(colors.red('Bad BDL class name found in', fileName));
                    }
                    process.exit(1);
                }

                break;
            case 'swap':
                // find, then swap in the proper new name
                const matches = [...new Set(fileToParse.match(reBadName))];
                let replacementFile = fileToParse;

                if (verboseMode) {
                    console.log(colors.cyan('File name:'), colors.white(fileName));
                    console.log(colors.cyan('Found:'), matches);
                }

                matches.forEach(match => {
                    if (fileType === 'scss' || (fileType === 'js' && testMode)) {
                        replacementFile = replacementFile.replace(new RegExp(`\\${match}`, 'g'), `.${conversionMap[kebabCase(match)]}`);
                    } else if (fileType === 'js') {
                        const quotationType = /"/.test(match) ? '"' : '\'';
                        replacementFile = replacementFile.replace(new RegExp(match, 'g'), `${quotationType}${conversionMap[kebabCase(match)]}`);
                    } else {
                        console.error(colors.yellow('Unrecognized file type for conversion. skipping', fileName, '...'));
                        process.exit(0);
                    }
                });

                try {
                    if (matches.length > 0) {
                        await writeFile(fileName, replacementFile);
                        console.log (colors.cyan(`Replaced ${matches.length} classname value${matches.length !== 1 ? 's': ''} in:\t`), fileName);
                    } else if (verboseMode) {
                        console.warn(colors.yellow('No changes needed to file:\t'), fileName);
                    }
                } catch (error) {
                    console.error(colors.red('Cannot write updated file to disk\n'), error);
                    process.exit(1);
                }

                break;
            default:
                console.error(colors.red('Unrecognized operation:'), colors.white(operation));
                console.error(colors.red('use "swap" to replace names, or "check" to verify if a file contains deprecated values'));
                process.exit(1);
                break;
        }
    } catch (error) {
        console.error(colors.red('Cannot read file, because it does not exist or the wrong path is specified\n'), error);
        process.exit(1);
    }
}

async function main() {
    // process conversion maps separately, so the basic classnames don't override the longer classnames:
    await processFile(extendedConversionMap);
    processFile(baseConversionMap);
}

if (process.argv.length < 3) {
    printHelp();
} else {
    main();
}
